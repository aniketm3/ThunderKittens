#include <iostream>
#include <string>
#include <fstream>

constexpr int ATTN_B = 16;
constexpr int ATTN_H = 12;
constexpr int ATTN_N = 1024;

long long flops_ref(int B, int N, int H) {
    // number of flops if we did the parallel view (C=L)
    long long flops = 2LL*B*H*N*N*ATTN_D + 2LL*B*H*N*N*ATTN_D; // Q@K.T and (Q@K.T)@V
    return flops;
}

long long flops_real(int B, int N, int H) {
    // number of flops with chunk-wise strategy
    int chunk_size = ACTIVE_TILES * ROWS;
    int n_chunks = N / chunk_size;
    long long flops = n_chunks * (2LL*B*H*chunk_size*chunk_size*ATTN_D + 2LL*B*H*chunk_size*chunk_size*ATTN_D); // note: idk how close it is to real
    return flops;
}

double efficiency(long long flop, double time) {
    // convert flop to teraflops and time to milliseconds
    double tflops = flop / 1e12;
    double time_ms = time / 1e6;
    return tflops / time_ms;
}

#define CudaCheckError()    __cudaCheckError( __FILE__, __LINE__ )
inline void __cudaCheckError( const char *file, const int line ) {
    cudaError err = cudaGetLastError();
    if ( cudaSuccess != err )
    {
        fprintf( stderr, "cudaCheckError() failed at %s:%i : %s\n",
                 file, line, cudaGetErrorString( err ) );
        exit( -1 );
    }
    // More careful checking. However, this will affect performance.
    // Comment away if needed.
    err = cudaDeviceSynchronize();
    if( cudaSuccess != err )
    {
        fprintf( stderr, "cudaCheckError() with sync failed at %s:%i : %s\n",
                 file, line, cudaGetErrorString( err ) );
        exit( -1 );
    }
}

int main(int argc, char **argv) {
    // TODO: consider doing sequential kernel launches to force batches dimension element to execute sequentially,
    // which may increase the probability of L2 cache hits on KV

    std::cout << "Entered main!" << std::endl;

    // number of elements in each q,k,v,o_ref to we read from file
    constexpr int TOTAL_ELEMENTS_QKVO_READ = ATTN_N*ATTN_D; // b=h=1 in the python gen file
    constexpr int TOTAL_ELEMENTS_QKVO = ATTN_B*ATTN_H*ATTN_N*ATTN_D;

    // create pointers
    float *q = new float[TOTAL_ELEMENTS_QKVO_READ];
    float *k = new float[TOTAL_ELEMENTS_QKVO_READ];
    float *v = new float[TOTAL_ELEMENTS_QKVO_READ];
    float *o_ref = new float[TOTAL_ELEMENTS_QKVO_READ];

    bf16 *q_bf = new bf16[TOTAL_ELEMENTS_QKVO];
    bf16 *k_bf = new bf16[TOTAL_ELEMENTS_QKVO];
    bf16 *v_bf = new bf16[TOTAL_ELEMENTS_QKVO];
    bf16 *o_bf = new bf16[TOTAL_ELEMENTS_QKVO];

    // on host after kernel
    float *o = new float[TOTAL_ELEMENTS_QKVO];

    if(argc > 1) {
        std::ifstream infile(argv[1]);

        std::cout << "Starting to enter!" << std::endl;

        for(int i = 0; i < TOTAL_ELEMENTS_QKVO_READ; i++) infile >> q[i];
        std::cout << "Finished loading Q" << std::endl;
        for(int i = 0; i < TOTAL_ELEMENTS_QKVO_READ; i++) infile >> k[i];
        std::cout << "Finished loading K" << std::endl;
        for(int i = 0; i < TOTAL_ELEMENTS_QKVO_READ; i++) infile >> v[i];
        std::cout << "Finished loading V" << std::endl;
        for(int i = 0; i < TOTAL_ELEMENTS_QKVO_READ; i++) { infile >> o_ref[i]; }
        std::cout << "Finished loading O_REF" << std::endl;

        std::cout << "Finished loading file from " << argv[1] << "!" << std::endl;
    }

    // replicate into heads
    for(int i = 0; i < TOTAL_ELEMENTS_QKVO; i++) {
        q_bf[i] = __float2bfloat16(q[i % TOTAL_ELEMENTS_QKVO_READ]);
        k_bf[i] = __float2bfloat16(k[i % TOTAL_ELEMENTS_QKVO_READ]);
    }
    for(int i = 0; i < TOTAL_ELEMENTS_QKVO; i++) {
        v_bf[i] = __float2bfloat16(v[i % TOTAL_ELEMENTS_QKVO_READ]);
    }
   /*
    for(int i = 0; i < TOTAL_ELEMENTS_QK; i++) {
        q_bf[i] = __float2bfloat16(q[i]);
        k_bf[i] = __float2bfloat16(k[i]);
    }
    for(int i = 0; i < TOTAL_ELEMENTS_VO; i++) {
        v_bf[i] = __float2bfloat16(v[i]);
    }
    */

    bf16 *d_q, *d_k, *d_v, *d_o; 
    cudaMalloc(&d_q, TOTAL_ELEMENTS_QKVO * sizeof(bf16));
    cudaMalloc(&d_k, TOTAL_ELEMENTS_QKVO * sizeof(bf16));
    cudaMalloc(&d_v, TOTAL_ELEMENTS_QKVO * sizeof(bf16));
    cudaMalloc(&d_o, TOTAL_ELEMENTS_QKVO * sizeof(bf16));

    cudaMemcpy(d_q, q_bf, TOTAL_ELEMENTS_QKVO * sizeof(bf16), cudaMemcpyHostToDevice);
    cudaMemcpy(d_k, k_bf, TOTAL_ELEMENTS_QKVO * sizeof(bf16), cudaMemcpyHostToDevice);
    cudaMemcpy(d_v, v_bf, TOTAL_ELEMENTS_QKVO * sizeof(bf16), cudaMemcpyHostToDevice);
    
    fwd_globals g = fwd_init(
        d_q, d_k, d_v, d_o,
        ATTN_B, ATTN_H, ATTN_N
    );

    cudaDeviceSynchronize();
    CudaCheckError();
    
    unsigned long mem_size = kittens::MAX_SHARED_MEMORY;
    std::cout << "Setting max block shared memory to " << mem_size << std::endl;
    
    using T = kittens::bf16;
    using H = kittens::bf16;
    cudaFuncSetAttribute(
        linear_attention_fwd,
        cudaFuncAttributeMaxDynamicSharedMemorySize,
        mem_size
    );

    const int ITER = 10;
    cudaDeviceSynchronize();
    CudaCheckError();
    std::cout << "Warmup!\n";
    dim3 grid(ATTN_H, ATTN_B);
    for(int i = 0; i < ITER; i++) {
        linear_attention_fwd<<<grid, NUM_THREADS, mem_size>>>(g); ;
    }
    cudaDeviceSynchronize();
    CudaCheckError();
    std::cout << "Starting kernel\n";
    const auto start = std::chrono::high_resolution_clock::now();
    for(int i = 0; i < ITER; i++) {
        linear_attention_fwd<<<grid, NUM_THREADS, mem_size>>>(g); 
    }
    cudaDeviceSynchronize();
    const auto finish = std::chrono::high_resolution_clock::now();
    CudaCheckError();
    std::cout << "Finished kernel\n";

    /*************************** Correctness Checks **************************** */
    
    // check correctness
    cudaMemcpy(o_bf, d_o, TOTAL_ELEMENTS_QKVO * sizeof(bf16), cudaMemcpyDeviceToHost);
    for(int i = 0; i < TOTAL_ELEMENTS_QKVO; i++) {
        o[i] = __bfloat162float(o_bf[i]);
    }

    bool good = true;
    std::ofstream o_ref_file("printouts/o_ref.txt");
    std::ofstream o_file("printouts/o.txt");
    std::ofstream diff_file("printouts/diff.txt");

    float max_diff = 0; 
    float avg_diff = 0; 

    std::cout << "Total elements: " << TOTAL_ELEMENTS_QKVO << std::endl;
    std::cout << "Total unique elements: " << TOTAL_ELEMENTS_QKVO_READ << std::endl;

    for(int i = 0; i < 10; i++) {
        std::cout << "o[" << i << "] = " << o[i] << " o_ref[" << i << "] = " << o_ref[i] << std::endl;
    }
    for(int i = 0; i < TOTAL_ELEMENTS_QKVO_READ; i++) {
        float diff = o[i] - o_ref[i];
        if(i < TOTAL_ELEMENTS_QKVO_READ) {
            o_ref_file << o_ref[i] << ' ';
            o_file << o[i] << ' ';
            diff_file << diff << ' ';
        }
        if(abs(diff) > 0.05 || isnan(diff)) {
            good = false;
        }
        max_diff = std::max(max_diff, abs(diff));
        avg_diff += abs(diff);
    }
    avg_diff /= TOTAL_ELEMENTS_QKVO_READ;
    std::cout << "Max diff: " << max_diff << std::endl;
    std::cout << "Avg diff: " << avg_diff << std::endl;
    if(good) std::cout << "Correct output :)\n";
    else std::cout << "Incorrect output :(\n";

    // calculate efficiency
    std::cout << "Average execution time: " << std::chrono::duration_cast<std::chrono::microseconds>(finish - start).count() / ITER << " us" << std::endl;
    long long f_ref = flops_ref(ATTN_B, ATTN_N, ATTN_H);
    long long f_real = flops_real(ATTN_B, ATTN_N, ATTN_H);
    double e_ref = efficiency(f_ref, std::chrono::duration_cast<std::chrono::microseconds>(finish - start).count() / ITER);
    double e_real = efficiency(f_real, std::chrono::duration_cast<std::chrono::microseconds>(finish - start).count() / ITER);
    std::cout << "Efficiency (ref): " << e_ref << " TFLOPS" << std::endl;
    std::cout << "Efficiency (real): " << e_real << " TFLOPS" << std::endl;

    cudaFree(d_q);
    cudaFree(d_k);
    cudaFree(d_v);
    cudaFree(d_o);

    delete[] q, k, v, o, o_ref;
    delete[] q_bf, k_bf, v_bf, o_bf;

    return 0;
}