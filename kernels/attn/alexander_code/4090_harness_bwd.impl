#include <iostream>
#include <string>
#include <fstream>

constexpr int ATTN_B = 16;
constexpr int ATTN_H = 12;
constexpr int ATTN_N = 1024;

long long flops_ref(int B, int N, int H) {
    // number of flops if we did the parallel view (C=L)
    long long flops = 2LL*B*H*N*N*ATTN_D + 2LL*B*H*N*N*ATTN_D; // Q@K.T and (Q@K.T)@V
    return flops;
}

long long flops_real(int B, int N, int H) {
    // number of flops with chunk-wise strategy
    int chunk_size = ACTIVE_TILES * ROWS;
    int n_chunks = N / chunk_size;
    long long flops = n_chunks * (2LL*B*H*chunk_size*chunk_size*ATTN_D + 2LL*B*H*chunk_size*chunk_size*ATTN_D); // note: idk how close it is to real
    return flops;
}

double efficiency(long long flop, double time) {
    // convert flop to teraflops and time to milliseconds
    double tflops = flop / 1e12;
    double time_ms = time / 1e6;
    return tflops / time_ms;
}

#define CudaCheckError()    __cudaCheckError( __FILE__, __LINE__ )
inline void __cudaCheckError( const char *file, const int line ) {
    cudaError err = cudaGetLastError();
    if ( cudaSuccess != err )
    {
        fprintf( stderr, "cudaCheckError() failed at %s:%i : %s\n",
                 file, line, cudaGetErrorString( err ) );
        exit( -1 );
    }
    // More careful checking. However, this will affect performance.
    // Comment away if needed.
    err = cudaDeviceSynchronize();
    if( cudaSuccess != err )
    {
        fprintf( stderr, "cudaCheckError() with sync failed at %s:%i : %s\n",
                 file, line, cudaGetErrorString( err ) );
        exit( -1 );
    }
}

int main(int argc, char **argv) {
    std::cout << "Entered main!" << std::endl;

    /*
    cudaDeviceProp prop;
    cudaGetDeviceProperties(&prop, 0);
    std::cout << "Device " << 0 << ": " << prop.name << std::endl;
    std::cout << "  Compute capability: " << prop.major << "." << prop.minor << std::endl;
    std::cout << "  Total global memory: " << prop.totalGlobalMem / (1024 * 1024) << " MB" << std::endl;
    std::cout << "  Shared memory per block: " << prop.sharedMemPerBlock << " bytes" << std::endl;
    std::cout << "  Registers per block: " << prop.regsPerBlock << std::endl;
    std::cout << "  Warp size: " << prop.warpSize << std::endl;
    std::cout << "  Maximum threads per block: " << prop.maxThreadsPerBlock << std::endl;
    std::cout << "  Maximum threads per multiprocessor: " << prop.maxThreadsPerMultiProcessor << std::endl;
    std::cout << "  Number of multiprocessors: " << prop.multiProcessorCount << std::endl;
    std::cout << std::endl;
    */

    constexpr int TOTAL_ELEMENTS_QKVO_READ = ATTN_N*ATTN_D; // b=h=1 in the python gen file
    constexpr int TOTAL_ELEMENTS_QKVO = ATTN_B*ATTN_H*ATTN_N*ATTN_D;

    // create pointers for inputs
    float *q = new float[TOTAL_ELEMENTS_QKVO_READ];
    float *k = new float[TOTAL_ELEMENTS_QKVO_READ];
    float *v = new float[TOTAL_ELEMENTS_QKVO_READ];
    float *d_o = new float[TOTAL_ELEMENTS_QKVO_READ];
    float *dq_ref = new float[TOTAL_ELEMENTS_QKVO_READ];
    float *dk_ref = new float[TOTAL_ELEMENTS_QKVO_READ];
    float *dv_ref = new float[TOTAL_ELEMENTS_QKVO_READ];

    bf16 *q_bf = new bf16[TOTAL_ELEMENTS_QKVO];
    bf16 *k_bf = new bf16[TOTAL_ELEMENTS_QKVO];
    bf16 *v_bf = new bf16[TOTAL_ELEMENTS_QKVO];
    bf16 *do_bf = new bf16[TOTAL_ELEMENTS_QKVO];
    bf16 *dq_bf = new bf16[TOTAL_ELEMENTS_QKVO];
    bf16 *dk_bf = new bf16[TOTAL_ELEMENTS_QKVO];
    bf16 *dv_bf = new bf16[TOTAL_ELEMENTS_QKVO];

    // outputs on host after kernel
    float *dq = new float[TOTAL_ELEMENTS_QKVO];
    float *dk = new float[TOTAL_ELEMENTS_QKVO];
    float *dv = new float[TOTAL_ELEMENTS_QKVO];

    if(argc > 1) {
        std::ifstream infile(argv[1]);
        std::cout << "Starting to enter!" << std::endl;

        for(int i = 0; i < TOTAL_ELEMENTS_QKVO_READ; i++) infile >> q[i];
        for(int i = 0; i < TOTAL_ELEMENTS_QKVO_READ; i++) infile >> k[i];
        for(int i = 0; i < TOTAL_ELEMENTS_QKVO_READ; i++) infile >> v[i];
        for(int i = 0; i < TOTAL_ELEMENTS_QKVO_READ; i++) infile >> d_o[i];
        for(int i = 0; i < TOTAL_ELEMENTS_QKVO_READ; i++) infile >> dq_ref[i];
        for(int i = 0; i < TOTAL_ELEMENTS_QKVO_READ; i++) infile >> dk_ref[i];
        for(int i = 0; i < TOTAL_ELEMENTS_QKVO_READ; i++) infile >> dv_ref[i];

        std::cout << "Finished loading file from " << argv[1] << "!" << std::endl;
    }

    // replicate into heads
    for(int i = 0; i < TOTAL_ELEMENTS_QKVO; i++) {
        q_bf[i] = __float2bfloat16(q[i % TOTAL_ELEMENTS_QKVO_READ]);
        k_bf[i] = __float2bfloat16(k[i % TOTAL_ELEMENTS_QKVO_READ]);
        v_bf[i] = __float2bfloat16(v[i % TOTAL_ELEMENTS_QKVO_READ]);
        do_bf[i] = __float2bfloat16(d_o[i % TOTAL_ELEMENTS_QKVO_READ]);
    }

    bf16 *d_q, *d_k, *d_v, *d_do, *d_dq, *d_dk, *d_dv;
    cudaMalloc(&d_q, TOTAL_ELEMENTS_QKVO * sizeof(bf16));
    cudaMalloc(&d_k, TOTAL_ELEMENTS_QKVO * sizeof(bf16));
    cudaMalloc(&d_v, TOTAL_ELEMENTS_QKVO * sizeof(bf16));
    cudaMalloc(&d_do, TOTAL_ELEMENTS_QKVO * sizeof(bf16));
    cudaMalloc(&d_dq, TOTAL_ELEMENTS_QKVO * sizeof(bf16));
    cudaMalloc(&d_dk, TOTAL_ELEMENTS_QKVO * sizeof(bf16));
    cudaMalloc(&d_dv, TOTAL_ELEMENTS_QKVO * sizeof(bf16));

    cudaMemcpy(d_q, q_bf, TOTAL_ELEMENTS_QKVO * sizeof(bf16), cudaMemcpyHostToDevice);
    cudaMemcpy(d_k, k_bf, TOTAL_ELEMENTS_QKVO * sizeof(bf16), cudaMemcpyHostToDevice);
    cudaMemcpy(d_v, v_bf, TOTAL_ELEMENTS_QKVO * sizeof(bf16), cudaMemcpyHostToDevice);
    cudaMemcpy(d_do, do_bf, TOTAL_ELEMENTS_QKVO * sizeof(bf16), cudaMemcpyHostToDevice);

    bwd_globals g = bwd_init(
        d_q, d_k, d_v, d_do, d_dq, d_dk, d_dv,
        ATTN_B, ATTN_H, ATTN_N
    );

    cudaDeviceSynchronize();
    CudaCheckError();
    
    unsigned long mem_size = kittens::MAX_SHARED_MEMORY;
    std::cout << "Setting max block shared memory to " << mem_size << std::endl;
    
    using T = kittens::bf16;
    using H = kittens::bf16;
    cudaFuncSetAttribute(
        linear_attention_bwd,
        cudaFuncAttributeMaxDynamicSharedMemorySize,
        mem_size
    );

    const int ITER = 10;
    cudaDeviceSynchronize();
    CudaCheckError();
    std::cout << "Warmup!\n";
    dim3 grid(ATTN_H, ATTN_B);
    for(int i = 0; i < ITER; i++) {
        linear_attention_bwd<<<grid, NUM_THREADS, mem_size>>>(g);
    }
    cudaDeviceSynchronize();
    CudaCheckError();
    std::cout << "Starting kernel\n";
    const auto start = std::chrono::high_resolution_clock::now();
    for(int i = 0; i < ITER; i++) {
        linear_attention_bwd<<<grid, NUM_THREADS, mem_size>>>(g); 
    }
    cudaDeviceSynchronize();
    const auto finish = std::chrono::high_resolution_clock::now();
    CudaCheckError();
    std::cout << "Finished kernel\n";

    /*************************** Correctness Checks **************************** */

    // check correctness for all gradients
    cudaMemcpy(dq_bf, d_dq, TOTAL_ELEMENTS_QKVO * sizeof(bf16), cudaMemcpyDeviceToHost);
    cudaMemcpy(dk_bf, d_dk, TOTAL_ELEMENTS_QKVO * sizeof(bf16), cudaMemcpyDeviceToHost);
    cudaMemcpy(dv_bf, d_dv, TOTAL_ELEMENTS_QKVO * sizeof(bf16), cudaMemcpyDeviceToHost);

    for(int i = 0; i < TOTAL_ELEMENTS_QKVO; i++) {
        dq[i] = __bfloat162float(dq_bf[i]);
        dk[i] = __bfloat162float(dk_bf[i]);
        dv[i] = __bfloat162float(dv_bf[i]);
    }

    bool good = true;
    float max_diff = 0;
    float avg_diff = 0;
    // check dq
    for(int i = 0; i < 10; i++) {
        std::cout << "dq[" << i << "] = " << dq[i] << " dq_ref[" << i << "] = " << dq_ref[i] << std::endl;
    }
    for(int i = 0; i < TOTAL_ELEMENTS_QKVO_READ; i++) {
        float diff = dq[i] - dq_ref[i];
        if(abs(diff) > 0.05 || isnan(diff)) good = false;
        max_diff = std::max(max_diff, abs(diff));
        avg_diff += abs(diff);
    }
    avg_diff /= (1 * TOTAL_ELEMENTS_QKVO_READ); // average across all gradients (dq,dk,dv)
    std::cout << "Max diff: " << max_diff << std::endl;
    std::cout << "Avg diff: " << avg_diff << std::endl;
    if(good) std::cout << "dq Correct :)\n";
    else std::cout << "dq Incorrect :(\n";

    good = true;
    max_diff = 0;
    avg_diff = 0;
    // check dk
    for(int i = 0; i < 10; i++) {
        std::cout << "dk[" << i << "] = " << dk[i] << " dk_ref[" << i << "] = " << dk_ref[i] << std::endl;
    }
    for(int i = 0; i < TOTAL_ELEMENTS_QKVO_READ; i++) {
        float diff = dk[i] - dk_ref[i];
        if(abs(diff) > 0.05 || isnan(diff)) good = false;
        max_diff = std::max(max_diff, abs(diff));
        avg_diff += abs(diff);
    }
    avg_diff /= (1 * TOTAL_ELEMENTS_QKVO_READ); // average across all gradients (dq,dk,dv)
    std::cout << "Max diff: " << max_diff << std::endl;
    std::cout << "Avg diff: " << avg_diff << std::endl;
    if(good) std::cout << "dk Correct :)\n";
    else std::cout << "dk Incorrect :(\n";

    good = true;
    max_diff = 0;
    avg_diff = 0;
    // check dv
    for(int i = 0; i < 10; i++) {
        std::cout << "dv[" << i << "] = " << dv[i] << " dv_ref[" << i << "] = " << dv_ref[i] << std::endl;
    }
    for(int i = 0; i < TOTAL_ELEMENTS_QKVO_READ; i++) {
        float diff = dv[i] - dv_ref[i];
        if(abs(diff) > 0.05 || isnan(diff)) good = false;
        max_diff = std::max(max_diff, abs(diff));
        avg_diff += abs(diff);
    }
    avg_diff /= (1 * TOTAL_ELEMENTS_QKVO_READ); // average across all gradients (dq,dk,dv)
    std::cout << "Max diff: " << max_diff << std::endl;
    std::cout << "Avg diff: " << avg_diff << std::endl;
    if(good) std::cout << "dv Correct :)\n";
    else std::cout << "dv Incorrect :(\n";

    // calculate efficiency
    std::cout << "Average execution time: " << std::chrono::duration_cast<std::chrono::microseconds>(finish - start).count() / ITER << " us" << std::endl;
    long long f_ref = flops_ref(ATTN_B, ATTN_N, ATTN_H);
    long long f_real = flops_real(ATTN_B, ATTN_N, ATTN_H);
    double e_ref = efficiency(f_ref, std::chrono::duration_cast<std::chrono::microseconds>(finish - start).count() / ITER);
    double e_real = efficiency(f_real, std::chrono::duration_cast<std::chrono::microseconds>(finish - start).count() / ITER);
    std::cout << "Efficiency (ref): " << e_ref << " TFLOPS" << std::endl;
    std::cout << "Efficiency (real): " << e_real << " TFLOPS" << std::endl;

    cudaFree(d_q);
    cudaFree(d_k);
    cudaFree(d_v);
    cudaFree(d_o);

    delete[] q, k, v, d_o, dq_ref, dk_ref, dv_ref;
    delete[] q_bf, k_bf, v_bf, do_bf, dq_bf, dk_bf, dv_bf;

    return 0;
}